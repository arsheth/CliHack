#!/usr/bin/open -a ToolServer
# -*- shell-script -*- coding: mac-roman -*-
# macbuild.txt - MPW build script for the MyMan video game
# Copyright 2008, Benjamin C. Wiley Sittler <bsittler@gmail.com>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# NOTE: In vim you have to do :e! right after opening this file to get
#       the correct encoding (MacRoman) displayed.

# 'Â', '\302', '\xC2', MacRoman 0xC2 (Option-L), U+00AC NOT SIGN
set char_not_sign 'Â'
# '¥', '\245', '\xA5', MacRoman 0xA5 (Option-8), U+2022 BULLET
set char_bullet '¥'
# '°', '\260', '\xB0', MacRoman 0xB0 (Option-5), U+221E INFINITY
set char_infinity '°'
# '¶', '\266', '\xB6', MacRoman 0xB6 (Option-D), U+2202 PARTIAL DIFFERENTIAL
set char_partial_differential '¶'

# verify at least that the byte count is correct
if `echo -n "{{char_not_sign}}{{char_bullet}}{{char_infinity}}{{char_partial_differential}}" | count -c` != 4
    echo "File ``quote "{{0}}"`` #Error: MacRoman special characters are corrupted" > dev:stderr
    exit 1
end

### Building MyMan for Carbon and Classic Mac OS in MPW Shell
##
## 1) Install the Macintosh Programmer's Workshop (MPW),
##    including the "Updated Components".
##
##   http://developer.apple.com/tools/mpw-tools/
##
##    You may also install the old Universal Interfaces 2.1.5, which
##    allows building 68k apps that run on System 6 (and possibly
##    earlier.)
##
##    If you do, install them in a separate directory hierarchy, e.g.
##    ":Interfaces-Libraries:" and let macbuild.txt know about it
##    using e.g. -sdkroot-68k ":Interfaces-Libraries:" when building for
##    the older systems; this old SDK does not support Carbon or
##    ATSUI, however.
##
##   ftp://ftp.apple.com/developer/Tool_Chest/Interfaces-Libraries/
##
## 2) Launch MPW Shell and raise MPW Memory Limits:
##
## HINT: Use Enter or Cmd-Return to run commands in MPW Shell;
##       omit the leading number sign (#) too
#
#setshellsize -f "{MPW}ToolServer" -s 4096k -p 65536k
#setshellsize -s 4096k -p 65536k
#
## 3) Navigate MPW Shell to MyMan source directory
#
#directory volName:path:to:myman
#
## 4) Build for the default hosts (Carbon, Carbon with ATSUI, "fat"
##    application, MPW Tool)
##
## NOTE: The type code must be set to TEXT explicitly for older System
## versions
#
#setfile -t TEXT :utl:macbuild.txt
#:utl:macbuild.txt smallman
#
## 5) Run MyMan MPW Tool:
#
#smallman
#
## 6) Launch MyMan 68K + PowerPC "fat" application, and wait for it to
## exit:
#
#fat-smallman -wait
#
## 7) Launch MyMan Carbon application (Either Mac OS X or Mac OS 8.6
## or greater with CarbonLib 1.6), and wait for it to exit:
#
#carbon-smallman -wait
#
## 8) Delete everything, since we're done:
#
#:utl:macbuild.txt -clean

set Exit 1
export Exit
set TraceFailures 1
export TraceFailures

set obj ":obj:"
set src ":"
set testfile "src:myman.c"

for src1 in "``echo -n "{{0}}" | streamedit -e '$ rep /['"{{char_not_sign}}"':]*'"{{char_infinity}}"'/ ""'``:" "{{src}}" ":" "::"
    if "``exists -f "{{src1}}{{testfile}}"``"
        set src "{{src1}}"
        break
    end
end

set all_sizes "bigman hugeman smallman squareman bitman"
set all_hosts "mpw mpw-68k mpw-ppc mpw-atsu fat 68k ppc cfm cfm-68k atsu carbon carbon-ppc carbon-atsu"

set defhosts "mpw fat carbon carbon-atsu"
set defhost "{{host}}"
for host2 in {defhosts} {all_hosts}
    set defhost "{{host2}}"
    break
end

set defsizes "{{all_sizes}}"

set allMode 0
set buildMode 0
set cleanMode 0
set debugMode 0

set hosts ""
set sizes ""
set specs ""
set sdkroot ""
set sdkroot-68k ""

if {#} <> 0
    loop
        if {#} == 0
            break
        end
        if :"{{1}}" == :"-build"
            set buildMode 1
        else if :"{{1}}" == :"-clean"
            set cleanMode 1
        else if :"{{1}}" == :"-debug"
            set debugMode 1
        else if :"{{1}}" == :"-c"
            set -e C C
        else if :"{{1}}" == :"-ppcc"
            set -e PPCC PPCC
        else if :"{{1}}" == :"-gcc-68k"
            set -e C gC
        else if :"{{1}}" == :"-gcc-ppc"
            set -e PPCC gC
        else if :"{{1}}" == :"-help" or :"{{1}}" == :"-h"
            echo '#usage: '"{{0}}"' [ OPTION ... ] [ HOST[-SIZE] | SIZE ] ...'
            echo "#options to select an action:"
            echo "#-h or -help     show this message and exit"
            echo "#-build          build specified eecutables; this is the default action if no other is specified"
            echo "#-clean          remove build products; without -build this removes executables too"
            echo "#-debug          include debugging symbols; disables optimization"
            echo "#options to control directory use:"
            echo "#-objdir DIR     place object files in directory DIR (default: {{obj}})"
            echo "#-srcdir DIR     sources are in directory DIR (default: {{src}})"
            echo "#-sdkroot DIR    use the MPW SDK (Interfaces&Libraries) in directory DIR"
            echo "#-sdkroot-68k DIR"
            echo "#                use the MPW 68k SDK (Interfaces&Libraries) in directory DIR"
            echo "#-c              use the C compiler "'"C"'" for 68k compilation"
            echo "#-ppcc           use the C compiler "'"PPCC"'" for PowerPC compilation"
            echo "#-gcc-68k        use "'"gC"'" (m68k-macos-gcc) for 68k compilation"
            echo "#-gcc-ppc        use "'"gC"'" (powerpc-macos-gcc) for PowerPC compilation"
            echo "#host and size selecion:"
            echo "#-all            build and/or clean all possible hosts and sizes"
            echo "#-host HOST      select the given host; multiple hosts can be selected by repeating this option"
            echo "#-hosts 'HOST ...'"
            echo "#                select the given hosts; overrides any previous selection"
            echo "#                default selected hosts: {{defhosts}}"
            echo "#-size SIZE      select the given size; multiple sizes can be selected by repeating this option"
            echo "#-sizes 'SIZE ...'"
            echo "#                select the given sizes; overrides any previous selection"
            echo "#                default selected sizes: {{defsizes}}"
            echo "#HOST            build and/or clean all selected sizes for the given host"
            echo "#SIZE            build and/or clean the given size for all selected hosts"
            echo "#HOST-SIZE       build and/or clean the given size for the given host"
            echo "#possible sizes: {{all_sizes}}"
            echo "#possible hosts: {{all_hosts}}"
            echo "#executables for host {{defhost}} are named SIZE"
            echo "#executables for hosts other than {{defhost}} are named HOST-SIZE"
            exit 0
        else if :"{{1}}" == :"-objdir"
            shift
            set obj "{{1}}"
        else if :"{{1}}" == :"-srcdir"
            shift
            set src "{{1}}"
        else if :"{{1}}" == :"-sdkroot"
            shift
            set sdkroot "{{1}}"
        else if :"{{1}}" == :"-sdkroot-68k"
            shift
            set sdkroot-68k "{{1}}"
        else if :"{{1}}" == :"-all"
            set allMode 1
        else if :"{{1}}" == :"-host"
            shift
            set hosts "{{hosts}} ``quote "{{1}}"``"
        else if :"{{1}}" == :"-size"
            shift
            set sizes "{{sizes}} ``quote "{{1}}"``"
        else if :"{{1}}" == :"-hosts"
            shift
            set hosts "{{1}}"
        else if :"{{1}}" == :"-sizes"
            shift
            set sizes "{{1}}"
        else
            set specs "{{specs}} ``quote "{{1}}"``"
        end
        shift
    end
end

if :"{{specs}}" == :""
    set specs "{{sizes}}"
end

if :"{{sizes}}" == :""
    # default sizes to build
    set sizes "{{defsizes}}"
end

if :"{{hosts}}" == :""
    # default hosts to build for
    set hosts "{{defhosts}}"
end

if {{buildMode}} == 0 and {{cleanMode}} == 0
    set buildMode 1
end

# make sure the source directory exists
if not "``exists -d "{{src}}"``"
    echo "#source directory {{src}} does not exist" > dev:stderr
    exit 2
end
set src "``exists -q -d "{{src}}"``"

# make sure this is the source directory
if not "``exists -f "{{src}}{{testfile}}"``"
    echo "#could not find MyMan sources in directory {{src}}" > dev:stderr
    exit 2
end

if :"{{sdkroot}}" != :""
    # make sure the SDK directory exists
    if not "``exists -d "{{sdkroot}}"``"
        echo "#SDK directory {{sdkroot}} does not exist" > dev:stderr
        exit 2
    end
    set sdkroot "``exists -q -d "{{sdkroot}}"``"
    set -e AIncludes "{{sdkroot}}Interfaces:AIncludes:"
    set -e CFM68KLibraries "{{sdkroot}}Libraries:CFM68KLibraries:"
    set -e CIncludes "{{sdkroot}}Interfaces:CIncludes:"
    set -e CLibraries "{{sdkroot}}Libraries:CLibraries:"
    set -e Libraries "{{sdkroot}}Libraries:Libraries:"
    set -e PInterfaces "{{sdkroot}}Interfaces:PInterfaces:"
    set -e PLibraries "{{sdkroot}}Libraries:PLibraries:"
    set -e PPCCIncludes "{{sdkroot}}Interfaces:CIncludes:"
    set -e PPCLibraries "{{sdkroot}}Libraries:PPCLibraries:"
    set -e RIncludes "{{sdkroot}}Interfaces:RIncludes:"
    set -e SCIncludes "{{sdkroot}}Interfaces:CIncludes:"
    set -e SharedLibraries "{{sdkroot}}Libraries:SharedLibraries:"
    for sdksubdir in "{{CFM68KLibraries}}" "{{CIncludes}}" "{{CLibraries}}" "{{PPCCIncludes}}" "{{PPCLibraries}}" "{{SCIncludes}}" "{{SharedLibraries}}"
        if not "``exists -d "{{sdksubdir}}"``"
            echo "#SDK subdirectory {{sdksubdir}} does not exist" > dev:stderr
            exit 2
        end
    end
end

if :"{{sdkroot-68k}}" != :""
    # make sure the 68k SDK directory exists
    if not "``exists -d "{{sdkroot-68k}}"``"
        echo "#68k SDK directory {{sdkroot-68k}} does not exist" > dev:stderr
        exit 2
    end
    set sdkroot-68k "``exists -q -d "{{sdkroot-68k}}"``"
    set -e AIncludes "{{sdkroot-68k}}Interfaces:AIncludes:"
    set -e CFM68KLibraries "{{sdkroot-68k}}Libraries:CFM68KLibraries:"
    set -e CLibraries "{{sdkroot-68k}}Libraries:CLibraries:"
    set -e Libraries "{{sdkroot-68k}}Libraries:Libraries:"
    set -e PInterfaces "{{sdkroot-68k}}Interfaces:PInterfaces:"
    set -e PLibraries "{{sdkroot-68k}}Libraries:PLibraries:"
    set -e SCIncludes "{{sdkroot-68k}}Interfaces:CIncludes:"
    for sdksubdir in "{{CFM68KLibraries}}" "{{CLibraries}}" "{{SCIncludes}}"
        if not "``exists -d "{{sdksubdir}}"``"
            echo "#68k SDK subdirectory {{sdksubdir}} does not exist" > dev:stderr
            exit 2
        end
    end
end

# generate the POSIX equivalent since this may end up running under
# Mac OS X in the Carbon case; note that names with non-ASCII
# characters may still fail horribly due to encoding differences and
# bugs in the MyMan sources
#
# FIXME: MacRoman != UTF-8
set srcdir "``echo -n "{{src}}" | streamedit -e '1 && /'"{{char_bullet}}"'['"{{char_not_sign}}"':]/ ins char_solidus -n; ins ":Volumes:" -n; 1 rep /'"{{char_bullet}}"':/ ".:"; /::/ rep /::/ ":..:" -c '"{{char_infinity}}"'; rep /::/ ":..:" -c '"{{char_infinity}}"'; 1 && /'"{{char_bullet}}"':/ rep /:/ "" -c 1' | translate ':/' '/:'``"

# cq: quote stdin for inclusion in a C string literal
alias cq 'streamedit -e "{{cq1}}" | translate "'"{{char_partial_differential}}"'r'"{{char_partial_differential}}"'n" "?/" | streamedit -e "{{cq2}}"'
set cq1 '/[\\]/ rep /[\\]/ "'"{{char_partial_differential}}"'\134" -c '"{{char_infinity}}"'; /'"{{char_partial_differential}}"'t/ rep /'"{{char_partial_differential}}"'t/ "'"{{char_partial_differential}}"'\t" -c '"{{char_infinity}}"'; /[""]/ rep /[""]/ "'"{{char_partial_differential}}"'\042" -c '"{char_infinity}"'; /[?]/ rep /[?]/ "'"{{char_partial_differential}}"'\?" -c '"{{char_infinity}}"'; /'"{{char_partial_differential}}"'// rep /'"{{char_partial_differential}}"'// "'"{{char_partial_differential}}"'\057" -c '"{{char_infinity}}"''
set cq2 '/[?]/ rep /[?]/ "'"{{char_partial_differential}}"'\r" -c '"{{char_infinity}}"'; /'"{{char_partial_differential}}"'// rep /'"{{char_partial_differential}}"'// "'"{{char_partial_differential}}"'\n" -c '"{{char_infinity}}"'; $ rep /'"{{char_partial_differential}}"'\n'"{{char_infinity}}"'/ "" -c 1'
# q: quote stdin for inclusion in an MPW shell command line argument
alias q '(quote -n "``catenate``")'
# qcq: composition of q and cq
alias qcq 'cq | q'

set CREATEMAKEFLAGS ""

## We used to try to optimize but it broke horribly. Not sure whether
##that's our bug or theirs yet...
#
#set CREATEMAKEFLAGS "-opt size"

if {{debugMode}} != 0
    # In debug mode we build a symbol files
    set CREATEMAKEFLAGS "-sym"
end &&

if {{buildMode}} != 0
    # make sure the object directory exists
    if not "``exists -d "{{obj}}"``"
        newfolder "{{obj}}"
    end
    if not "``exists -d "{{obj}}"``"
        echo "#could not create directory {{obj}}" > dev:stderr
        exit 2
    end
    set obj "``exists -q -d "{{obj}}"``"

    # create our line ending conversion tool
    delete -i u2m.c "{{obj}}"u2m.c.x "{{obj}}"u2m.c.o u2m.NJ u2m.SYM u2m.xcoff
    echo '#include <stdio.h>' > u2m.c
    echo 'int main(void){int i,j;while(1){i=getchar();if(i==-1) break;' >> u2m.c
    echo 'if(i==0x0d){j=getchar();if(j==0x0a)i=0x0a;else if(j!=-1)ungetc(j,stdin);}' >> u2m.c
    echo 'if(i==0x0a)i=0x0d;putchar(i);}return 0;}' >> u2m.c
    delete -i u2m u2m.make u2m.makeout &&
    createmake u2m u2m.c -tool -fat {CREATEMAKEFLAGS} -objdir "{{obj}}" &&
    make -e -f u2m.make > u2m.makeout &&
    u2m.makeout &&

    # use our line ending conversion tool
    setfile -t TEXT "{{src}}"VERSION "{{src}}"COPYRIGHT &&
    set MYMANVERSION "``catenate "{{src}}"VERSION | :u2m``" &&
    set MYMANCOPYRIGHT "``catenate "{{src}}"COPYRIGHT | :u2m``" &&

    # convert source and include file type codes to 'TEXT'
    setfile -t TEXT "{{src}}"inc:maccurs.h "{{src}}"inc:guess.h "{{src}}"inc:utils.h "{{src}}"src:myman.c "{{src}}"src:utils.c "{{src}}"src:logic.c "{{src}}"mygetopt:getopt.h "{{src}}"mygetopt:mygetopt.c "{{src}}"mygetopt:mygetopt.h "{{src}}"inc:optcurs.h

end &&

if {{cleanMode}} != 0
    # delete our line ending conversion tool
    delete -i u2m.c "{{obj}}"u2m.c.x "{{obj}}"u2m.c.o u2m.NJ u2m.SYM u2m.xcoff &&
    delete -i u2m u2m.make u2m.makeout
end &&

# for sending string literals to the C compiler and including the solidus in them (which MyMan autoconverts to colon when needed)
set char_quotation_mark "'"'"'"'" &&
set char_solidus "{{char_quotation_mark}}CHAR_SOLIDUS{{char_quotation_mark}}" &&

# "myman" is the default maze; see Makefile for more
set MAZEFILE_myman "maze.txt" &&
set mymanmaze "-D MAZEFILE={{char_quotation_mark}}lvl{{char_solidus}}{{MAZEFILE_myman}}{{char_quotation_mark}}" &&
set myman "-D MYMANVARIANT={{char_quotation_mark}}myman{{char_quotation_mark}} {{mymanmaze}}" &&

# "big" is the default size (large ASCII-art pictures)
set bigman "{{big}} {{myman}}" &&

# "huge" is the largest size (huge ASCII-art pictures)
set TILEFILE_huge "chr5x3.txt" &&
set hugetiles "-D TILEFILE={{char_quotation_mark}}chr{{char_solidus}}{{TILEFILE_huge}}{{char_quotation_mark}}" &&
set SPRITEFILE_huge "spr10x6.txt" &&
set hugesprites "-D SPRITEFILE={{char_quotation_mark}}spr{{char_solidus}}{{SPRITEFILE_huge}}{{char_quotation_mark}}" &&
set huge "-D MYMANSIZE={{char_quotation_mark}}huge{{char_quotation_mark}} {{hugetiles}} {{hugesprites}}" &&
set hugeman "{{huge}} {{myman}}" &&

# "small" uses a pair of character-cells to represent each tile and sprite
set TILEFILE_small "khr2h.txt" &&
set smalltiles "-D TILEFILE={{char_quotation_mark}}chr{{char_solidus}}{{TILEFILE_small}}{{char_quotation_mark}}" &&
set SPRITEFILE_small "spr2h.txt" &&
set smallsprites "-D SPRITEFILE={{char_quotation_mark}}spr{{char_solidus}}{{SPRITEFILE_small}}{{char_quotation_mark}}" &&
set small "-D MYMANSIZE={{char_quotation_mark}}small{{char_quotation_mark}} {{smalltiles}} {{smallsprites}}" &&
set smallman "{{small}} {{myman}}" &&

# "square" uses one character-cell to represent each tile and sprite
set TILEFILE_square "khr1.txt" &&
set squaretiles "-D TILEFILE={{char_quotation_mark}}chr{{char_solidus}}{{TILEFILE_square}}{{char_quotation_mark}}" &&
set SPRITEFILE_square "spr1.txt" &&
set squaresprites "-D SPRITEFILE={{char_quotation_mark}}spr{{char_solidus}}{{SPRITEFILE_square}}{{char_quotation_mark}}" &&
set square "-D MYMANSIZE={{char_quotation_mark}}square{{char_quotation_mark}} {{squaretiles}} {{squaresprites}}" &&
set squareman "{{square}} {{myman}}" &&

# "bitmap" uses pseudo-bitmap tiles and overrides the fontsize to match
set TILEFILE_bitmap "khr8.txt" &&
set bitmaptiles "-D TILEFILE={{char_quotation_mark}}chr{{char_solidus}}{{TILEFILE_bitmap}}{{char_quotation_mark}}" &&
set SPRITEFILE_bitmap "spr16.txt" &&
set bitmapsprites "-D SPRITEFILE={{char_quotation_mark}}spr{{char_solidus}}{{SPRITEFILE_bitmap}}{{char_quotation_mark}}" &&
set bitmap "-D MYMANSIZE={{char_quotation_mark}}bitmap{{char_quotation_mark}} {{bitmaptiles}} {{bitmapsprites}}" &&
set bitman "-D MACCURSES_FONTSIZE=1 -D MACCURSES_FONT={{char_quotation_mark}}Monaco{{char_quotation_mark}} {{bitmap}} {{myman}}" &&

for host in {hosts}
    set matched 0
    for host1 in {all_hosts}
        if :"{{host}}" == :"{{host1}}"
            set matched 1
            break
        end
    end
    if {{matched}} == 0
        echo "#host {{host}} not recognized" > dev:stderr
        echo '#usage: '"{{0}}"' [ -help ] [ OPTION ... ] [ HOST[-SIZE] | SIZE ] ...'
        exit 2
    end
end &&

for spec in {specs}
    set matched 0
    for host in {all_hosts}
        if :"{{spec}}" == :"{{host}}"
            set matched 1
            break
        end
        for size in {all_sizes}
            if :"{{spec}}" == :"{{host}}-{{size}}" or :"{{spec}}" == :"{{size}}"
                set matched 1
                break
            end
        end
        if {{matched}} != 0
            break
        end
    end &&
    if {{matched}} == 0
        echo "#build specifier {{spec}} not recognized" > dev:stderr
        echo '#usage: '"{{0}}"' [ -help ] [ OPTION ... ] [ HOST[-SIZE] | SIZE ] ...'
        exit 2
    end
end &&

for size in {all_sizes}
    set sizematched ""
    for size1 in {sizes}
        if :"{{size}}" == :"{{size1}}"
            set sizematched "{{size}}"
            break
        end
    end &&
    for host in {all_hosts}
        set hostmatched ""
        for host1 in {hosts}
            if :"{{host}}" == :"{{host1}}"
                set hostmatched "{{host}}"
                break
            end
        end &&
        set matched {{allMode}}
        for spec in {specs}
            if :"{{spec}}-{{sizematched}}" == :"{{host}}-{{size}}" or :"{{spec}}" == :"{{host}}-{{size}}" or :"{{hostmatched}}-{{spec}}" == :"{{host}}-{{size}}"
                set matched 1
                break
            end
        end &&
        if {{matched}} != 0
            set hostsize "{{size}}"
            if :"{{host}}" != :"{{defhost}}"
                set hostsize "{{host}}-{{size}}"
            end
            delete -i "{{hostsize}}".makeout
            echo 'set DEFS "{{'"{{size}}"'}}"' > "{{hostsize}}".makeout
            execute "{{hostsize}}".makeout
            delete -i "{{hostsize}}".makeout
            if ":{{DEFS}}" == ":"
                echo "#size {{size}} not defined" > dev:stderr
                exit 2
            end

            delete -i "{{obj}}"myman.c.o "{{obj}}"myman.c.x &&
            delete -i "{{obj}}"utils.c.o "{{obj}}"utils.c.x &&
            delete -i "{{obj}}"logic.c.o "{{obj}}"logic.c.x &&
            delete -i "{{obj}}"mygetopt.c.o "{{obj}}"mygetopt.c.x &&
            delete -i "{{obj}}{{hostsize}}".r &&
            delete -i "{{hostsize}}".NJ "{{hostsize}}".SYM "{{hostsize}}".xcoff "{{hostsize}}".68k.NJ "{{hostsize}}".68k.SYM "{{hostsize}}".ppc.xcoff "{{hostsize}}".68k "{{hostsize}}".ppc &&
            delete -i "{{hostsize}}" "{{hostsize}}".make "{{hostsize}}".makeout &&
            if {{buildMode}} != 0
                # C compiler flags, all architectures
                set CFLAGS "-x -noMapCR -D PRIVATEDATADIR={{char_quotation_mark}}``echo -n "{{srcdir}}" | qcq``{{char_quotation_mark}} -D MACCURSES=1 -D MYGETOPT=1 -D MYMANVERSION={{char_quotation_mark}}``echo -n "{{MYMANVERSION}}" | qcq``{{char_quotation_mark}} -D MYMANCOPYRIGHT={{char_quotation_mark}}``echo -n "{{MYMANCOPYRIGHT}}" | qcq``{{char_quotation_mark}} {{DEFS}}" &&

                # Linker flags, all architectures
                set LDFLAGS "" &&

                # Extra flags for the 68k C compiler
                set 68KCFLAGS "" &&
                if {{debugMode}} != 0
                    # -frames: Generate frame pointers in debug mode
                    set 68KCFLAGS "-frames"
                end &&
                set 68KCFLAGS "{{68KCFLAGS}}" &&

                # Extra flags for the 68k linker

                # -br 68k: Generate branch islands (MC68000-compatible)
                set 68KLDFLAGS "-br 68k" &&

                # Extra flags for the PowerPC C compiler
                set PPCCFLAGS "" &&

                # Extra flags for the PowerPC linker
                set PPCLDFLAGS "" &&

                # shared libraries for the non-Carbon builds
                set LIBS "" &&
                for lib in FontManager TextCommon WindowsLib ATSUnicodeLib UnicodeConverter TextEncodingConverter AppearanceLib
                    set LIBS "{{LIBS}} `quote "{{SharedLibraries}}{{lib}}"`"
                end &&
                if {{debugMode}} != 0
                    for lib in ::DebuggingLibraries:SharedLibraries:StdCLibDbg
                        set LIBS "{{LIBS}} `quote "{{SharedLibraries}}{{lib}}"`"
                    end &&
                    for lib in ::DebuggingLibraries:CLibraries:StdCLibDbg.far.o
                        set LIBS "{{LIBS}} `quote "{{CLibraries}}{{lib}}"`"
                    end
                end &&

                # PowerPC libraries for the non-Carbon builds
                set PPCLIBS "" &&
                for lib in CarbonAccessors.o
                    set PPCLIBS "{{LIBS}} ``quote "{{PPCLibraries}}{{lib}}"``"
                end &&

                # Memory partition sizes arrived at empirically:
                #     ppc and 68k: 700k
                set MEMSIZE 700 &&
                #     carbon: 1200k
                for carbonhost in carbon-ppc carbon-atsu carbon
                    if ":{{carbonhost}}" == ":{{host}}"
                        set MEMSIZE 1400 &&
                        break
                    end
                end &&

                # Let MultiFinder know our memory requirements and
                # that we're 32-bit clean and event-aware
                echo '#include "Types.r"' > "{{obj}}{{hostsize}}".r &&
                echo "resource 'SIZE' (-1) "'{'"0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,{{MEMSIZE}}*1024,{{MEMSIZE}}*1024"'}'";" >> "{{obj}}{{hostsize}}".r &&

                set HOSTFLAGS "{{CREATEMAKEFLAGS}}" &&
                if ":{{host}}" == ":mpw"
                    # Classic 68K + PowerPC "fat" toolbox QuickDraw Text MPW tool
                    set HOSTFLAGS "{{HOSTFLAGS}} ``quote {PPCLIBS} {LIBS}`` -fat -model far -tool"
                else if ":{{host}}" == ":mpw-68k"
                    # Classic 68k toolbox QuickDraw Text MPW tool
                    set HOSTFLAGS "{{HOSTFLAGS}} ``quote {LIBS}`` -68k -model far -tool"
                else if ":{{host}}" == ":mpw-ppc"
                    # Classic PowerPC toolbox QuickDraw Text MPW tool
                    set HOSTFLAGS "{{HOSTFLAGS}} ``quote {PPCLIBS} {LIBS}`` -powerpc -tool"
                else if ":{{host}}" == ":mpw-atsu"
                    # Classic PowerPC toolbox ATSUI MPW tool
                    set HOSTFLAGS "{{HOSTFLAGS}} ``quote {PPCLIBS} {LIBS}`` -powerpc -tool"
                    set PPCCFLAGS "{{PPCCFLAGS}} -D UNICODE=1"
                else if ":{{host}}" == ":ppc"
                    # Classic PowerPC toolbox QuickDraw Text application
                    set HOSTFLAGS "{{HOSTFLAGS}} -c MyMa ``quote {PPCLIBS} {LIBS}`` -powerpc"
                else if ":{{host}}" == ":68k"
                    # Classic 68k toolbox QuickDraw Text application
                    set HOSTFLAGS "{{HOSTFLAGS}} -c MyMa ``quote {LIBS}`` -68k -model far"
                else if ":{{host}}" == ":fat"
                    # Classic 68k + PowerPC "fat" toolbox QuickDraw Text application
                    set HOSTFLAGS "{{HOSTFLAGS}} -c MyMa ``quote {PPCLIBS} {LIBS}`` -fat -model far"
                else if ":{{host}}" == ":cfm-68k"
                    # Classic CFM-68K toolbox QuickDraw Text application (BROKEN: DOES NOT RUN)
                    set HOSTFLAGS "{{HOSTFLAGS}} -c MyMa ``quote {LIBS}`` -68k -model cfm68k"
                    # HACK: optimizing for space breaks the CFM-68K build, so we disable that
                    set HOSTFLAGS "``echo "{{HOSTFLAGS}}" | streamedit -e '/-opt size/ rep /-opt size/ ""'``"
                else if ":{{host}}" == ":cfm"
                    # Classic CFM-68K + PowerPC "fat" toolbox QuickDraw Text application (BROKEN: DOES NOT RUN)
                    set HOSTFLAGS "{{HOSTFLAGS}} -c MyMa ``quote {PPCLIBS} {LIBS}`` -fat -model cfm68k"
                    # HACK: optimizing for space breaks the CFM-68K build, so we disable that
                    set HOSTFLAGS "``echo "{{HOSTFLAGS}}" | streamedit -e '/-opt size/ rep /-opt size/ ""'``"
                else if ":{{host}}" == ":atsu"
                    # Classic PowerPC toolbox ATSUI application
                    set HOSTFLAGS "{{HOSTFLAGS}} -c MyMa ``quote {PPCLIBS} {LIBS}`` -powerpc"
                    set PPCCFLAGS "{{PPCCFLAGS}} -D UNICODE=1"
                else if ":{{host}}" == ":carbon-ppc"
                    # Carbon QuickDraw Text application
                    set HOSTFLAGS "{{HOSTFLAGS}} -c MyMa -powerpc -carbon -noSizeRsrc"
                else if ":{{host}}" == ":carbon-atsu"
                    # Carbon ATSUI application
                    set HOSTFLAGS "{{HOSTFLAGS}} -c MyMa -powerpc -carbon -noSizeRsrc"
                    set PPCCFLAGS "{{PPCCFLAGS}} -D UNICODE=1"
                else if ":{{host}}" == ":carbon"
                    # Carbon + 68k "fat" QuickDraw Text application
                    set HOSTFLAGS "{{HOSTFLAGS}} -c MyMa -fat -carbon -noSizeRsrc -model far"
                else
                    echo "#host {{host}} not defined" > dev:stderr
                    exit 2
                end &&
                createmake "{{hostsize}}" -I "{{src}}"inc: -I "{{src}}"mygetopt: "{{src}}"src:myman.c "{{src}}"src:utils.c "{{src}}"src:logic.c "{{src}}"mygetopt:mygetopt.c "{{obj}}{{hostsize}}".r {HOSTFLAGS} -COptions "{{CFLAGS}} {{68KCFLAGS}}" -ppcCOptions "{{CFLAGS}} {{PPCCFLAGS}}" -LinkOptions "{{LDFLAGS}} {{68KLDFLAGS}}" -ppcLinkOptions "{{LDFLAGS}} {{PPCLDFLAGS}}" -objdir "{{obj}}" &&

                # HACK: tweak CFM-68K builds to use the pure 32-bit model
                if ":{{host}}" == ":cfm" or ":{{host}}" == ":cfm-68k"
                    streamedit -e '/-model cfmseg/ rep /-model cfmseg/ "-model cfmflat"' -o "{{hostsize}}".make "{{hostsize}}".make
                end &&
                make -e -f "{{hostsize}}".make > "{{hostsize}}".makeout &&
                "{{hostsize}}".makeout &&
                #echo "{{hostsize}} #MyMan {{MYMANVERSION}} host={{host}} size={{size}}"
            end &&
            if {{cleanMode}} != 0
                delete -i "{{obj}}"myman.c.o "{{obj}}"myman.c.x &&
                delete -i "{{obj}}"utils.c.o "{{obj}}"utils.c.x &&
                delete -i "{{obj}}"logic.c.o "{{obj}}"logic.c.x &&
                delete -i "{{obj}}"mygetopt.c.o "{{obj}}"mygetopt.c.x &&
                delete -i "{{obj}}{{hostsize}}".r &&
                delete -i "{{hostsize}}".NJ "{{hostsize}}".SYM "{{hostsize}}".xcoff "{{hostsize}}".68k.NJ "{{hostsize}}".68k.SYM "{{hostsize}}".ppc.xcoff "{{hostsize}}".68k "{{hostsize}}".ppc &&
                delete -i "{{hostsize}}".make "{{hostsize}}".makeout
            end
        end
    end
end

# vim:fencs=macroman
